// <auto-generated />
using System;
using LetsPlay.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LetsPlay.Migrations
{
    [DbContext(typeof(LetsPlayDbContext))]
    [Migration("20181213004802_signups")]
    partial class signups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LetsPlay.Models.Comments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message");

                    b.Property<int>("PostID");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.HasIndex("PostID")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LetsPlay.Models.Friendships", b =>
                {
                    b.Property<string>("User1");

                    b.Property<string>("User2");

                    b.Property<bool>("Accepted");

                    b.HasKey("User1", "User2");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("LetsPlay.Models.GeneralChat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<string>("User");

                    b.HasKey("ID");

                    b.ToTable("GeneralChats");
                });

            modelBuilder.Entity("LetsPlay.Models.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Read");

                    b.Property<string>("Recipient");

                    b.Property<string>("Sender");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LetsPlay.Models.PlayerSignups", b =>
                {
                    b.Property<int>("PostID");

                    b.Property<string>("Username");

                    b.HasKey("PostID", "Username");

                    b.ToTable("Signups");
                });

            modelBuilder.Entity("LetsPlay.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("Game")
                        .IsRequired();

                    b.Property<string>("Location");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MinPlayers");

                    b.Property<DateTime>("PostedDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("LetsPlay.Models.Comments", b =>
                {
                    b.HasOne("LetsPlay.Models.Post", "Post")
                        .WithOne("Comments")
                        .HasForeignKey("LetsPlay.Models.Comments", "PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LetsPlay.Models.PlayerSignups", b =>
                {
                    b.HasOne("LetsPlay.Models.Post", "Post")
                        .WithMany("Signups")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
