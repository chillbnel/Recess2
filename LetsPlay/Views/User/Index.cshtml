@model LetsPlay.Models.ViewModels.FriendshipsViewModel
@using Microsoft.AspNetCore.Identity
@using LetsPlay.Models

@inject SignInManager<ApplicationUser> SignInManager

@{
    Layout = "_Layout";
    bool isFriend = false;
    bool receivedRequest = false;
    bool sentRequest = false;
    bool ownProfile = false;

    @if (Model.User.UserName == SignInManager.UserManager.GetUserName(User))
    {
        ownProfile = true;
    }

    if (Model.Friends.Contains(Model.User))
    {
        isFriend = true;
    }

    if (Model.ReceivedRequests.Contains(Model.User))
    {
        receivedRequest = true;
    }

    if (Model.SentRequests.Contains(Model.User))
    {
        sentRequest = true;
    }
}
<dl>
    <dt>@Html.DisplayNameFor(model => model.User.Name)</dt>
    <dd>@Html.DisplayFor(model => model.User.Name)</dd>
    <dt>@Html.DisplayNameFor(model => model.User.GamerTag)</dt>
    <dd>@Html.DisplayFor(model => model.User.GamerTag)</dd>
    <dt>@Html.DisplayNameFor(model => model.User.Age)</dt>
    <dd>@Html.DisplayFor(model => model.User.Age)</dd>
    <dt>@Html.DisplayNameFor(model => model.User.Location)</dt>
    <dd>@Html.DisplayFor(model => model.User.Location)</dd>
</dl>
@if (SignInManager.IsSignedIn(User))
{
    if (ownProfile)
    {
        <a href="#">Edit profile</a>
        <form asp-action="Logout" asp-controller="Account" method="post">
            <button type="submit">Logout</button>
        </form>
    }
    else if (isFriend)
    {
        <p>You are Friends!</p>
        <form asp-action="RemoveFriend" asp-controller="Friendships" method="post">
            <input type="hidden" name="user1" value="@SignInManager.UserManager.GetUserName(User)" />
            <input type="hidden" name="user2" value="@Model.User.UserName" />
            <button type="submit">Remove Friend</button>
        </form>
    }
    else if (receivedRequest)
    {
        <p>This player wants to be your friend!</p>
        <form asp-action="AcceptRequest" asp-controller="Friendships" method="post">
            <input type="hidden" name="from" value="@SignInManager.UserManager.GetUserName(User)" />
            <input type="hidden" name="to" value="@Model.User.UserName" />
            <button type="submit">Accept</button>
        </form>
        <form asp-action="RemoveFriend" asp-controller="Friendships" method="post">
            <input type="hidden" name="user1" value="@SignInManager.UserManager.GetUserName(User)" />
            <input type="hidden" name="user2" value="@Model.User.UserName" />
            <button type="submit">Reject</button>
        </form>
    }
    else if (sentRequest)
    {
        <p>Friend Request Sent!</p>
        <form asp-action="RemoveFriend" asp-controller="Friendships" method="post">
            <input type="hidden" name="user1" value="@SignInManager.UserManager.GetUserName(User)" />
            <input type="hidden" name="user2" value="@Model.User.UserName" />
            <button type="submit">Cancel Friend Request</button>
        </form>
    }
    else
    {
        <form asp-action="SendRequest" asp-controller="Friendships" method="post">
            <input type="hidden" name="from" value="@SignInManager.UserManager.GetUserName(User)" />
            <input type="hidden" name="to" value="@Model.User.UserName" />
            <button type="submit">Send Friend Request</button>
        </form>
    }

}

<p>@Model.User.UserName's friends:</p>
@foreach (var friend in Model.ViewUserFriends)
{
    <a href="/users/@friend.GamerTag">@friend.GamerTag</a>
}

<p>@Model.User.UserName's Signed up Events:</p>
@foreach (var post in Model.UserSignedupEvents)
{
    <a href="/post/details/@post.ID">@post.Title</a>
}
